q
self.attributes[through_options.foreign_key]
self.attributes
self
q
self.self.class.custom_method(through_options)
self.class.custom_method(through_options)
self.class
self
q
self.send(:foreign_key_between_self_model_and_through_model)
self.send(:owner_id)
foreign_key_between_self_model_and_through_model
q
self.owner_id
self
foreign_key_between_self_model_and_through_model
self_instance
q
self_value.owner_id
self_value
through_options.foreign_key
through_options.foreign_key}
self_value.owner_id
self_value
q
n
s
n
self
q
n
list=
args
q
#{through_options.class_name.constantize.table_name}.id
#{self_value}.#{through_options.foreign_key}
n
@table_name
n
list=
#{self_value}
self_value
self_valie
self
q
self.send(:through_options.foreign_key)
self.through_options.foreign_key
through_options.foreign_key
q
self.owner_id
self
q
self.class
self
q
n
list=
n
q
self.owner_id
self
q
n
house
n
q
n
self.class.columns
self.class
self.clas
params
self
s
hash_object
s
results
s
q
results
s
record[0]
record
q
record
q
record
q
record
q
record
q
source_options.class_name.constantize.table_name}.id
source_options.class_name.constantize.table_name.id
source_options.class_name.constantize.table_name
through_options.class_name.constantize.table_name
through_options.class_name.constantize
through_options.class_name
through_options.class_name.tableize
through_options.class_name.table_name
through_options.class_name.model_class
through_options.class_name
through_options
House.table_name
House.table_nakme
Human.table_name
Human.class.model_class
Human.model_class
Human.table_name
Human.table_naje
Human.tableize
House.all.first.attributes
House.parse_all(House.all.first.attributes)
House.parse_all(House.all.first)
House.all.first
House.all.firsty
House.where(id: 1)
House.all.where(id: 1)
House.all
House
source_options.foreign_key
source_options.foreign_keuy
House.all
cat.send(:human_options.foreign_key)
cat.human_options.foreign_key
cat = Cat.all.first
cat = Cat.first
human_options.foreign_key
human_options = Cat.assoc_options[:human]
source_options.foreign_key
list=
model2_records[0].class
model2_records[0]
model2_records
model1_records
n
q
through_options.class_name.all 
n
q
list=
n
q
n
q
n
mn
n
q
list=
Human.assoc_options[:foreign_key]
Human.assoc_options.foreign_key
Human.assoc_options
human.assoc_options
human
Human.source_options.foreign_key
Human.all.source_options.foreign_key
Human.all.first.source_options.foreign_key
human."#{source_options.foreign_key}"
human
source_options.foreign_key
human.foreign_key
source_options.model_class.all
human.send(:foreign_key)
human.foreign_key
human
foreign_key = source_options.foreign_key
foreign_key
human.source_options.foreign_key
human
human = Human.all.first
Human.all
source_options.foreign_key
source_options.model_class
through_options.model_class
House.all.last.id == 1
House.all.first.id == 1
House.first.id == 1
House.all
n
q
houses
houses.first.class
houses.class
houses
house = houses.select { |house| house.id = 1 }
houses
houses = House.all
house = House.all.select { |house| house.id = 1 }
House.all
House.find(2).id
House.find(2)
House.all
house = House.all.select { |house| house.id = 1 }
House.all.select { |house| house.id = 1 }
House.all.each { |house| house }
House.all.each { |house| p house }
House.each { |house| p house }
House.all
source_options
through_options
House.where(id: through_options.foreign_key)
House.where(id: 1)
source_options
through_options
list=
self.assoc_options[through_name]
self.class.assoc_options[through_name]
House.where(source_options.foreign_key: houses.id)
House.where(source_options.foreign_key = houses.id)
House.where(source_options.foreign_key = House.id)
House.where(source_options.foreign_key: House.id)
source_options.foreign_key
list=
House.where(id: 1)
Human.where(id: 1)
Human.select(:id).where(id: 1)
Human.select(:id).joins(:houses)
Human.where(id: 2)
Human.find(1)
Human.joins(:houses)
Human.all
House.all
source_options
through_options
n
q
source_options.joins(self.model_class).where(id: through_options.foreign_key)
n
list=
through_options.model_class.assoc_options[source_name]
through_options
n
q
list=
Human.joins(:house)
through_options.foreign_key
through_options
self
self.foreign_key
self.foreign_keyh
source_options.where(id: 1)
source_options
through_options
list=
self.class.joins(:human)
self.joins(:human)
Human.joins(:house)
source_options.joins(:house)
through_options.model_class
through_options
self.model_class
self
self.class.model_class
self.class
source_options.joins(self.model_class)
