q
n
s
n
s
n
s
n
s
n
s
display piece
piece
s
position
color
s
n
s
king_position
n
king
n
s
n
s
n
q
list=
board_copy.in_check?(color)
board_copy
n
board_copy
n
s
n
q
board_copy
n
list=
board_copy
s
n
q
e
q
board_copy
n
list=
board_copy
piece_at_square
n
square
s
list=
board_copy
n
moves
q
board_copy[square.first, square.last]
null_piece
q
n
square
s
list=
board_copy
n
s
a
n
q
n
s
square
s
list=
board_copy
n
s
all_moves
n
q
list=
piece
s
n
color
s
list=
col_idx
col
n
s
n
s
n
q
n
s
square_under_attack?(row, col_idx)
square_has_same_color_piece?(row, col_idx)
col_idx
n
col_idx
s
row
n
s
n
q
s
move_dirs
n
square_under_attack?(row, col_idx)
square_has_same_color_piece?(row, col_idx)
col_idx
n
row
col_idx
s
n
row
n
row
col_idx
n
col_idx
n
square_under_attack?(row, col_idx)
square_has_same_color_piece?(row, col_idx)
n
col_idx
row
s
n
row
n
s
n
q
n
s
n
q
piece.moves.include?(position)
color
position
piece.class
list=
piece
piece.color == color
n
display piece.position
s
exit
list=
piece.moves
color
n
list=
piece
n
piece
n
display piece.position
piece
s
list=
rows
color
position
q
color
n
s
col
row
n
display piece.position
piece
s
piece
s
color
position
n
s
q
col
row
n
position
color
n
s
opponent_color
col
row
q
nq
m
n
color
n
s
q
board.any_pieces_attacking?([row, col_idx], opponent_color)
opponent_color
self
q
color
piece
n
c
q
c
q
position
piece.moves.include?(position) 
piece.color
color
n
s
n
display piece
display piece.position
n
piece
s
piece
list=
row
s
n
row_idx
row
list=
rows[7].length
rows.length
rows
row
n
color
position
q
piece
n
list=
row.length
row
rows.length
rows
n
display piece.position
n
