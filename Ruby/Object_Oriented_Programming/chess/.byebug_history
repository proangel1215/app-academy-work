q
s
white_piece_score >= black_piece_score
n
precedence_hash[white_piece.class.to_s]
white_piece
n
board_copy[black_move.first, black_move.last].color
board_copy[black_move.first, black_move.last]
black_piece_score
black_move
list=
black_move
board_copy[black_move.first, black_move.last]
n
player_positions_on_duplicate_board
s
black_move
s
n
s
black_move
s
n
black_move
s
valid_squares
n
s
n
s
n
s
n
s
n
s
n
s
n
s
n
s
n
s
n
s
n
s
n
s
display piece.position
piece
s
n
s
n
black_move
s
piece
s
n
s
n
s
n
s
n
s
n
s
piece.class
s
n
s
piece
s
n
s
piece
s
n
s
piece
s
n
black_move
list=
black_mov
s
piece
s
n
s
piece
s
n
s
piece
s
n
s
piece
s
n
black_piece_score
n
s
player_move
player_piece.class
s
n
q
n
display piece.position
piece
n
piece
n
piece
s
n
list=
black_piece.class
black_piece_score
n
move
player_piece.position
s
n
c
player_move
n
player_move
player_piece.position
player_piece
s
n
c
n
c
n
q
n
q
end_pos
piece
q
position.all? { |i| (0..7).include?(i) }
position
q
n
all_moves
n
s
n
s
n
s
n
s
n
s
n
q
s
n
color
q
position
q
n
captured_piece
n
board[end_pos.first, end_pos.last].class
n
s
[piece.class, start_pos, end_pos, captured_piece]
n
captured_piece
n
s
board[end_pos.first, end_pos.last].class
piece.opponent_color == board[end_pos.first, end_pos.last].color
end_pos
piece
n
end_pos
piece
n
q
piece.opponent_color == board[end_pos.first, end_pos.last].color
end_pos
piece
n
end_pos
piece
n
captured_piece
n
piece.opponent_color == board[end_pos.first, end_pos.last].color
end_pos
piece
n
captured_piece
n
s
n
s
piece.opponent_color == board[end_pos.first, end_pos.last].color
end_pos
piece
n
s
piece.opponent_color == board[end_pos.first, end_pos.last].color
end_pos
piece.color
piece
q
column
n
row
n
column
row
n
q
color == board[row, col].color
col
row
q
pieces_with_valid_moves
list=
s
player_positions
n
pieces_with_valid_moves_including_a_player_position
n
q
color
piece.color
color
position
piece
s
piece
s
piece.color
color
position
piece
s
piece.position
piece
s
piece
