q
list=
piece.color
piece
piece.moves.include?(position) 
n
s
n
piece
piece.moves.include?(position)
n
s
color
s
display piece.position
display piece.color
piece
s
piece
s
n
position
piece
s
display piece
s
color
position
s
move
q
position
c
position
list=
postition
s
move
c
position
s
list=
move
movew
q
s
color
position
s
move
q
list=
black_piece.position
black_piece
get_player_pieces_with_valid_moves_including_a_black_position
player_pieces_with_valid_moves_including_a_black_position
list=
move
black_piece.valid_moves
list=
board
board.any_pieces_attacking?([3,2], :white)
!board.any_pieces_attacking?([3,2], :white)
board.any_pieces_attacking?(move, :white)
list=
move
moce
n
black_piece
n
piece
n
piece
s
position
piece
s
piece
n
s
piece
n
s
piece
n
s
piece
list=
piece.color
piece
n
piece
s
piece
s
color
position
s
move
s
n
s
black_piece
n
s
player_move
s
n
piece
n
piece.position
piece.positiomn
piece
s
n
piece
n
s
n
s
n
s
n
s
n
s
piece
s
n
s
n
s
n
s
n
s
n
s
n
s
n
s
list=
piece
piecve
n
piece.position
n
piece.position
piece
s
n
s
n
s
n
s
n
black_piece_score
s
display piece
s
n
s
piece
s
n
s
n
black_piece_score
n
black_piece
n
s
player_pieces_with_valid_moves_including_a_black_position
s
n
s
n
q
s
n
s
n
q
s
white_piece_score >= black_piece_score
n
precedence_hash[white_piece.class.to_s]
white_piece
n
board_copy[black_move.first, black_move.last].color
board_copy[black_move.first, black_move.last]
black_piece_score
black_move
list=
black_move
board_copy[black_move.first, black_move.last]
n
player_positions_on_duplicate_board
s
black_move
s
n
s
black_move
s
n
black_move
s
valid_squares
n
s
n
s
n
s
n
s
n
s
n
s
n
s
n
s
n
s
n
s
n
s
n
s
display piece.position
piece
s
n
s
n
black_move
s
piece
s
n
s
n
s
n
s
n
s
n
s
piece.class
