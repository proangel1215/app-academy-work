q
n
captured_piece
n
board[end_pos.first, end_pos.last].class
n
s
[piece.class, start_pos, end_pos, captured_piece]
n
captured_piece
n
s
board[end_pos.first, end_pos.last].class
piece.opponent_color == board[end_pos.first, end_pos.last].color
end_pos
piece
n
end_pos
piece
n
q
piece.opponent_color == board[end_pos.first, end_pos.last].color
end_pos
piece
n
end_pos
piece
n
captured_piece
n
piece.opponent_color == board[end_pos.first, end_pos.last].color
end_pos
piece
n
captured_piece
n
s
n
s
piece.opponent_color == board[end_pos.first, end_pos.last].color
end_pos
piece
n
s
piece.opponent_color == board[end_pos.first, end_pos.last].color
end_pos
piece.color
piece
q
column
n
row
n
column
row
n
q
color == board[row, col].color
col
row
q
pieces_with_valid_moves
list=
s
player_positions
n
pieces_with_valid_moves_including_a_player_position
n
q
color
piece.color
color
position
piece
s
piece
s
piece.color
color
position
piece
s
piece.position
piece
s
piece
s
piece.position
piece
list=
row
piece
s
piece
s
piece
s
piece
s
piece
s
piece
n
piece
s
piece
s
list=
piece
self
piece
row[0]
row[0[
row
piece
n
piece
n
piece.color
piece
n
piece
display piece
list=
row
piece
s
n
s
n
s
n
s
n
display square
s
n
s
n
q
n
s
n
c
q
s
n
row
rows
list=
self
piece
piece.position
n
piece
n
display piece.color
display piece
piece
s
n
move_dirs
n
s
piece
s
display piece
s
color
position
s
n
s
king.opponent_color
king_position
n
king.position
king.color
king
n
s
color
s
color
board_copy
self
s
self
s
self
s
col
row
s
self
s
end_pos
start_pos
s
position
board_copy
n
end_pos
s
n
display square
n
s
square
moves
list=
squares
s
n
s
square
n
c
s
moves
n
c
q
n
s
n
s
n
moves
s
n
s
q
nq
mn
n
c
cx
q
eddq
dCF
c
q
end_pos
s
moves
s
move_dir
move_dirs
move_dirsw
all_moves
s
knight_moves
n
knight_moves
n
