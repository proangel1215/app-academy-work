quit
@furthest_wall.first
square[0].first
surrounding_squares.include?(square[0])
n
s
quit
n
s
c
n
quit
solver.end_greater_than_start
@end_greater_than_start
@end_greater_than_star
n
s
quit
@end_greater_than_start 
n
s
quit
n
s
n
s
n
s
n
s
n
display furthest_wall
display col
display row
s
n
quit
n
display furthest_wall
display col
display row
n
row
col
s
row
col
s
n
@end_position.last >= @start_position.last
n
quit
n
quit
n
new_square
n
surrounding_squares.include?(square[0]) && square[1][1] <= next_square_g_score
square[1][1] <= next_square_g_score
next_square_g_score 
square[1][1]
surrounding_squares.include?(square[0])
if surrounding_squares.include?(square[0]) && square[1][1] <= next_square_g_score 
next_square_g_score
n
@sorted_list[idx + 1][1][1]  
@sorted_list[1][1]
idx
@sorted_list
s
@sorted_list
n
quit
@open_list
@open_list[square][1] 
square[1][1]
square[0]
square
quit
new_square
n
new_square
n
square[0]
surrounding_squares
square
s
quit
new_square
s
quit
n
m
n
s
c
display surrounding_squares
display new_square
display square[0]
display square
square
s
quit
@sorted_list
n
quit
surrounding_squares
quit
@sorted_list
new_square
n
surrounding_squares
quit
@closed_list[current_square][1]
@closed_list
n
current_square
square
quit
@maze[@current_square.first - 1][@current_square.last - 1]
display surrounding_squares
quit
@current_move
possible_moves
n
c
display @maze
c
@maze
c
@maze
c
@maze
c
@maze
c
solver
@maze
c
@maze
c
@maze
n
puts @maze
@maze
n
s
n
solver
possible_moves
n
quit
sorted_possible_moves
c
n
@maze[move.first][move.last]
move
n
sorted_possible_moves[-1][0]
sorted_possible_moves
quit
p @maze
puts @maze
p @maze
@maze
@maze[5, 1]
possible_moves
@maze[5, 0]
@maze
move
s
n
quit
@maze
@mazer
@mae
possible_moves
n
