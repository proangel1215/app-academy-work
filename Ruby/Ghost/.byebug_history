c
sorted_moves
possible_moves_tree
possible_words
winning_moves
losing_moves
c
sorted_moves
losing_moves
c
losing_moves
c
sorted_moves
c
sorted_moves
possible_moves_tree
possible_words
winning_moves
losing_moves
c
sorted_moves
possible_moves_tree
possible_words
winning_moves
losing_moves
c
sorted_moves
possible_moves_tree
possible_words
losing_moves
winning_moves
c
sorted_moves
possible_moves_tree
possible_words
losing_moves
winning_moves
c
sorted_moves
possible_moves_tree
possible_words
losing_moves
winning_moves
quit
("joist".length - poss_fragment.length) % (player_ct + 1) != 1
!losing_moves.include?('s')
"joist"[0..poss_fragment.length - 1] == poss_fragment && ("joist".length - poss_fragment.length) % (player_ct + 1) != 1 && !losing_moves.include?(ltr)
poss_fragment
n
display word
n
word
s
c
display ltr
c
display ltr
losing_moves
winning_moves
quit
losing_moves
winning_moves
quit
losing_moves
winning_moves
c
losing_moves
winning_moves
sorted_moves
c
possible_words
possible_moves_tree
sorted_moves
c
sorted_moves
possible_moves_tree
possible_words
quit
exit
poss_fragment
s
c
display ltr
quit
winning_moves
c
display ltr
word
s
word
losing_moves
quit
sorted_moves
possible_words
possible_moves_tree
quit
possible_moves_tree
possible_words
quit
possible_moves_tree
possible_words
quit
possible_moves_tree
possible_words
losing_moves
winning_moves
quit
winning_moves
possible_words
losing_moves
winning_moves
sorted_moves
quit
player_ct
player_ct <= "maunder".length - poss_fragment.length
"maunder"[0..poss_fragment.length - 1] == poss_fragment
poss_fragment
poss_fragmenty
"maunder"[0..poss_fragment.length - 1] == poss_fragment && player_ct <= word.length - poss_fragment.length && !losing_moves.include?(ltr)
word[0..poss_fragment.length - 1] == poss_fragment && player_ct <= word.length - poss_fragment.length && !losing_moves.include?(ltr)
n
word
s
c
display ltr
c
ltr
word
s
word
c
word
ltr
n
ltr
word
s
fragment
c
s
c
word
s
c
s
display word
c
quit
word
woird
player_ct
fragment
dictionary
losing_moves
winning_moves
possible_words
possible_moves_tree
sorted_moves
c
u
c
u
c
winning_moves
c
winning_moves
n
ltr
winning_moves
n
winning_moves
ltr
word
word[0..poss_fragment.length - 1] == poss_fragment && player_ct <= word.length - poss_fragment.length && !losing_moves.include?(ltr)
word[0..poss_fragment.length - 1]
poss_fragment
word.length - poss_fragment.length
player_ct
losing_moves
winning_moves
s
c
s
n
display word
display ltr
quit
dictionary.each_key { |word| p word }
dictionary.each_key 
dictionary
n
display poss_fragment
n
display word
display ltr
n
dictionary
quit
n
display word
n
display ltr
display lte
n
winning_moves
quit
word
n
c
word
s
word
list=
dictionary
c
display word
c
quit
c
C
c
fragment
winning_moves
losing_moves
sorted_moves
c
quit
n
sorted_moves[-1][0]
sorted_moves
list=
winning_moves
losing_moves
winning_move
n
c
n
c
n
player_ct
fragment
quit
n
