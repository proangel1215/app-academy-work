q
min_arr_length
other.store.store
store.store
q
min_arr_length
other
store.store[0..min_arr_length - 1]
q
other
other.store.store
store.store
q
arr
n
q
arr.store
arr.shift
arr.store
store
arr
n
arr
q
arr
n
arr
n
arr
q
val
q
ber
val
q
store
q
store
n
idx
n
val
q
arr
n
arr
s
store
n
s
q
store
n
count
store
n
s
idx
n
q
store
n
idx
n
val
q
i
q
store.store[-6]
store.store[-1]
store.store
store
n
store
list=
i
q
store.store
n
store
list=
i
q
c
s
ss
s
store.store
n
store.store
store
other
s
q
n
c
n
q
s
ss
s
store.store
n
s
store.store
s
q
store
s
q
arr
n
q
n
val
store
s
store
n
store
n
capacity
store_copy
n
list=
store.store
store.stor
store
q
arr
q
arr
q
ber
@store.store
q
arr.store.store
arr.store
arr
aee
n
@store.store
n
s
n
@store.store
n
val
q
@store.store.unshift(2)
@store.store.unshift(val)
@store.store
q
@store.store << val 
@store.store
q
@store.store.add_el(val) 
@store.store
q
s
val
q
store
val
q
ber
q
map.include?(key)
map
key
s
q
store
oldest_node_key
q
bucket
linked_list
key
q
self.class
self
q
s
q
list_vals_yielded
s
n
s
q
s
q
list=
list.each[3].val
list.each[2].val
list.each[1].val
list.each[0].val
list.each.length
 list_vals_yielded
list=
list.each
list_vals_ordered = k_v_pairs.values
list=
list.each
list=
list
s
list=
arr_of_nodes[3].val
arr_of_nodes[2].val
arr_of_nodes[1].val
arr_of_nodes[0].val
arr_of_nodes.length
n
q
ber
arr_of_nodes.length
arr_of_nodes
n
q
arr_of_nodes
n
q
s
display current_node
q
s
display arr_of_nodes
s
